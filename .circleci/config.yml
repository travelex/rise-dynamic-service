---
version: 2.1

references:
  branch_filters: &branch_filters
    branches:
      only:
        - /feature\/.*/
        - /play\/.*/
        - development
        - /release\/.*/
        - /hotfix\/.*/
        - master

  attach_workspace: &attach_workspace
    attach_workspace:
      at: .

  # This is required to checkout other private repositories
  add_custom_ssh_keys: &add_custom_ssh_keys
    fingerprints:
      - "7a:0d:f9:08:c0:b2:54:9c:97:8a:f8:0f:9d:d7:2a:1d" # travelex/it-infra-modules key

  add_node_ssh_keys: &add_node_ssh_keys
    fingerprints:
      - "53:05:2b:e4:95:33:13:90:09:5b:90:65:02:dc:b3:e3" # salman private SSH key - jurajseffer keys will be replaced after all developers are migrated to latest branch

  setup_env: &setup_env
    name: Shared environment setup
    command: |
      cat .extra_env
      cat .extra_env >> $BASH_ENV
      mkdir -p ~/.aws
      cp .aws/* ~/.aws/
      # the following commands are normally ran by checkout step but we may only run checkout once
      mkdir -p ~/.ssh
      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      git config --global url."ssh://git@github.com".insteadOf https://github.com
      git config --global gc.auto 0 || true
      ls -la ~/.ssh

jobs:
  setup:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - add_ssh_keys: *add_custom_ssh_keys
      - run:
          name: Dependencies are installed
          command: sudo pip install awscli
      - run:
          name: Initializing AWS credentials and environment
          command: |
            echo "export APP_PARENT=ws" >> .extra_env
            echo "export APP_NAME=middleware" >> .extra_env
            echo 'export AWS_DEFAULT_REGION="eu-west-1"' >> .extra_env
            echo 'export ANSIBLE_HDIR="$CIRCLE_WORKING_DIRECTORY/ansible"' >> .extra_env
            echo 'export APP_CONFIG_HOME="$CIRCLE_WORKING_DIRECTORY/ansible/config/$APP_NAME"' >> .extra_env
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              export AWS_ACCESS_KEY_ID=$PROD_IAM_ID
              export AWS_SECRET_ACCESS_KEY=$PROD_IAM_KEY
              export IAM_ROLE=$PROD_IAM_ROLE
              AWS_ACCOUNT_TYPE="prod"
              APP_ENVIRONMENT="production"
            else
              export AWS_ACCESS_KEY_ID=$NONPROD_IAM_ID
              export AWS_SECRET_ACCESS_KEY=$NONPROD_IAM_KEY
              export IAM_ROLE=$NONPROD_IAM_ROLE
              AWS_ACCOUNT_TYPE="nonprod"
              BRANCH_STEM=${CIRCLE_BRANCH/\/*//}
              BRANCH_STEM=${CIRCLE_BRANCH/\/*//}
              APP_ENVIRONMENT=$(echo -e 'feature/ dev\nplay/ play\ndevelopment sit\nrelease/ uat\nhotfix/ preprod\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')
              if [ -z "${APP_ENVIRONMENT}" ]; then
                echo "Your branch name ${CIRCLE_BRANCH} didn't match any environment. This step should not have run. Consult README.md."
                exit 44
              fi
            fi
            echo "export AWS_ACCOUNT_TYPE=${AWS_ACCOUNT_TYPE}" >> .extra_env
            echo "export APP_ENVIRONMENT=${APP_ENVIRONMENT}" >> .extra_env
            echo "Custom environment values:"
            echo "Using AWS account as: $AWS_ACCOUNT_TYPE, and application environment as: $APP_ENVIRONMENT."
            mkdir -p .aws
            aws sts assume-role --role-session-name circle --role-arn $IAM_ROLE | jq -r '.Credentials | "[default]\naws_access_key_id = \(.AccessKeyId)\naws_secret_access_key = \(.SecretAccessKey)\naws_session_token = \(.SessionToken)\naws_security_token = \(.SessionToken)\nregion = eu-west-1"' > .aws/credentials
      - persist_to_workspace:
          root: .
          paths:
            - .

  s3-download:
    docker:
      - image: 173523405217.dkr.ecr.eu-west-1.amazonaws.com/travelex-infra:0.2
        aws_auth:
          aws_access_key_id: $NONPROD_IAM_ID
          aws_secret_access_key: $NONPROD_IAM_KEY
    steps:
      - checkout
      - *attach_workspace
      - add_ssh_keys: *add_custom_ssh_keys
      - run: *setup_env
      - run:
          name: copy_terraform_output_to_s3_bucket
          command: |
            pwd
            pip install awscli            
            ls -lart            
            aws s3 cp s3://tvx-${APP_NAME}-${APP_ENVIRONMENT}-terraformoutput/terraform_outputs.json terraform/applications/
            cd terraform/applications/
            ls -lart
            pwd
      - persist_to_workspace:
          root: /root/project/
          paths:
            - "terraform/applications/terraform_outputs.json"

  lambda-job:
    docker:
      - image: circleci/node:14.17-stretch
    steps:
      - *attach_workspace
      - add_ssh_keys: *add_node_ssh_keys
      - run: *setup_env
      - run:
          name: Serverless dependencies are installed
          command: |
            cd common/serverless
            sudo make install
            make configure
      - run:
          name: Lambda is built and deployed
          command: |
            cd ${CIRCLE_STAGE}
            make build test deploy
      - setup_remote_docker:
          name: Spining off remote docker
      # - run:
      #     name: Pivio yaml pushing
      #     command: |
      #       echo $(pwd)
      #       echo $(ls)
      #       docker create -v /source --name configs alpine:3.4 /bin/true
      #       docker cp ${CIRCLE_STAGE}/pivio.yaml configs:/source
      #       docker pull leanix/pivio-client
      #       docker run --rm --volumes-from configs leanix/pivio-client npm-license-checker
      #       docker run --rm --volumes-from configs leanix/pivio-client pivio -serviceurl "https://app.leanix.net/services/integrations/v2/pivio/document" -verbose -addfield "api_token=${PIVIO_LEANIX_API_KEY}"

workflows:
  middleware:
    jobs:
      - setup:
          filters: *branch_filters
      - s3-download:
          requires:
            - setup
          filters: *branch_filters
      - lambda-job:
          name: rise-dynamic-service
          requires:
            - s3-download
          filters: *branch_filters
