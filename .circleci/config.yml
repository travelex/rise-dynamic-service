---
version: 2.1
parameters:
  ENV_TYPE:
    type: string
    default: "main"
  TAGS:
    type: string
    default: "default"
  REGION:
    type: string
    default: "default"

attach_workspace: &attach_workspace
    attach_workspace:
      at: ~/

add_ssh_keys_infra_modules: &add_ssh_keys_infra_modules
    fingerprints:
      - "7a:0d:f9:08:c0:b2:54:9c:97:8a:f8:0f:9d:d7:2a:1d"
infra_modules_checkout: &infra_modules_checkout
    name: Clone it-infra-modules repository to get generic ansible roles
    command: |
      GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:travelex/it-infra-modules.git ~/it-infra-modules
      ls -s ~/it-infra-modules 

load_bash_env: &load_bash_env
    name: Export shared environment variables for ingress
    command: |
      cat ~/.env >> $BASH_ENV
      echo "export APP_PARENT=hackathon" >> ${BASH_ENV}        
      echo "export APP_NAME=mentorship-ui" >> ${BASH_ENV}
      echo 'export AWS_REGION="eu-west-1"' >> ${BASH_ENV}
      echo 'export ANSIBLE_HDIR="$CIRCLE_WORKING_DIRECTORY/ansible"' >> ${BASH_ENV}
      echo 'export GIT_SHA="$CIRCLE_SHA1"' >> ${BASH_ENV}
      cat ${BASH_ENV}

jobs:
  sts:
    docker:
      - image: governmentpaas/awscli
    steps:
      - run: apk add --no-cache git perl
      - checkout
      - run: mkdir -p /workspace/.aws
      - run:
          name: Create AWS config file with temp credentials
          command: |
           
            export AWS_ACCESS_KEY_ID=$nonprod_circleci_app_bootstrap_access_key
            export AWS_SECRET_ACCESS_KEY=$nonprod_circleci_app_bootstrap_secret_key
            export AWS_REGION=$AWS_REGION
            export IAM_ROLE=$NONPROD_IAM_ROLE
            

            if [ "${CIRCLE_BRANCH}" = "master" ]; then             
              
              export IAM_ROLE=$PROD_IAM_ROLE
              export AWS_ACCESS_KEY_ID=$prod_circleci_app_bootstrap_access_key
              export AWS_SECRET_ACCESS_KEY=$prod_circleci_app_bootstrap_secret_key
              export AWS_REGION=$AWS_REGION
            

              echo "inside if"
            fi
            aws sts assume-role --role-session-name circle --role-arn $IAM_ROLE | jq -r '.Credentials | "[default]\naws_access_key_id = \(.AccessKeyId)\naws_secret_access_key = \(.SecretAccessKey)\naws_session_token = \(.SessionToken)\nregion = eu-west-1"' > /workspace/.aws/credentials
      - run:
          name: put variables into workspace so that it can be used by all jobs
          command: |
            BRANCH_STEM=${CIRCLE_BRANCH/\/*//}
            ENVIRONMENT=$(echo -e 'develop dev\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')
            AWS_ACCOUNT_TYPE=$(echo -e 'develop nonprod\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')

            echo "export APP_ENVIRONMENT=${ENVIRONMENT}" >> /workspace/.env
            echo "export ENVIRONMENT=${ENVIRONMENT}" >> /workspace/.env
            echo "export AWS_REGION=${AWS_REGION}" >> /workspace/.env
            echo "export AWS_ACCOUNT_TYPE=${AWS_ACCOUNT_TYPE}" >> /workspace/.env
                        
            cat /workspace/.env
            echo "APP_ENVIRONMENT is ${APP_ENVIRONMENT}"
            echo "ENVIRONMENT is ${ENVIRONMENT}"
            echo "AWS_ACCOUNT_TYPE is ${AWS_ACCOUNT_TYPE}"

            if [[ "<< pipeline.parameters.ENV_TYPE >>"  == "bcp" ]]; then
               tf_vars_prefix="bcp" 
               echo $tf_vars_prefix
            else
               tf_vars_prefix="main"
                echo $tf_vars_prefix
               
            fi
            
            echo "tf_vars_prefix=${tf_vars_prefix}" >> /workspace/.env
            echo "tf_vars_prefix is $tf_vars_prefix"

            if [[ "<< pipeline.parameters.TAGS >>"  == "all" ]]; then
               TAG_NAMES="all" 
            else
               TAG_NAMES="<< pipeline.parameters.TAGS >>"
               if [[ "<< pipeline.parameters.TAGS >>"  == "default" ]]; then
                  TAG_NAMES=`git log -1 --pretty=%B | perl -nle 'print $1 if /\((.*)\)/'`
                  echo $TAG_NAMES                  
               fi
            fi

            echo "TAG_NAMES=${TAG_NAMES}" >> /workspace/.env
            echo "TAG_NAMES is $TAG_NAMES"
            
      - persist_to_workspace:
          root: /workspace
          paths:
            - .aws/credentials
            - .env
  
  sts_dmz:
    docker:
      - image: governmentpaas/awscli
    steps:
      - run: apk add --no-cache git perl
      - checkout
      - run: mkdir -p /workspace/.aws
      - run:
          name: Create AWS config file with temp credentials
          command: |
           
            export AWS_ACCESS_KEY_ID=$nonprod_circleci_app_bootstrap_access_key_dmz
            export AWS_SECRET_ACCESS_KEY=$nonprod_circleci_app_bootstrap_secret_key_dmz
            export AWS_REGION=$AWS_REGION
            export IAM_ROLE=$NONPROD_IAM_ROLE_DMZ
            APP_ENVIRONMENT="dev"

            if [ "${CIRCLE_BRANCH}" = "master" ]; then             
              
              export IAM_ROLE=$PROD_IAM_ROLE_DMZ
              export AWS_ACCESS_KEY_ID=$prod_circleci_app_bootstrap_access_key_dmz
              export AWS_SECRET_ACCESS_KEY=$prod_circleci_app_bootstrap_secret_key_dmz
              export AWS_REGION=$AWS_REGION
              APP_ENVIRONMENT="prod"

              echo "inside if"
            fi
            aws sts assume-role --role-session-name circle --role-arn $IAM_ROLE | jq -r '.Credentials | "[default]\naws_access_key_id = \(.AccessKeyId)\naws_secret_access_key = \(.SecretAccessKey)\naws_session_token = \(.SessionToken)\nregion = eu-west-1"' > /workspace/.aws/credentials
      - run:
          name: put variables into workspace so that it can be used by all jobs
          command: |
            BRANCH_STEM=${CIRCLE_BRANCH/\/*//}
            ENVIRONMENT=$(echo -e 'develop dev\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')
            AWS_ACCOUNT_TYPE=$(echo -e 'develop nonprod\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')

            echo "export APP_ENVIRONMENT=${AWS_ACCOUNT_TYPE}" >> /workspace/.env
            echo "export ENVIRONMENT=${ENVIRONMENT}" >> /workspace/.env
            echo "export AWS_REGION=${AWS_REGION}" >> /workspace/.env
            echo "export AWS_ACCOUNT_TYPE=${AWS_ACCOUNT_TYPE}" >> /workspace/.env
                        
            cat /workspace/.env
            echo "APP_ENVIRONMENT is ${APP_ENVIRONMENT}"
            echo "ENVIRONMENT is ${ENVIRONMENT}"
            echo "AWS_ACCOUNT_TYPE is ${AWS_ACCOUNT_TYPE}"

            if [[ "<< pipeline.parameters.ENV_TYPE >>"  == "bcp" ]]; then
               tf_vars_prefix="bcp" 
               echo $tf_vars_prefix
            else
               tf_vars_prefix="main"
                echo $tf_vars_prefix
               
            fi
            
            echo "tf_vars_prefix=${tf_vars_prefix}" >> /workspace/.env
            echo "tf_vars_prefix is $tf_vars_prefix"

            if [[ "<< pipeline.parameters.TAGS >>"  == "all" ]]; then
               TAG_NAMES="all" 
            else
               TAG_NAMES="<< pipeline.parameters.TAGS >>"
               if [[ "<< pipeline.parameters.TAGS >>"  == "default" ]]; then
                  TAG_NAMES=`git log -1 --pretty=%B | perl -nle 'print $1 if /\((.*)\)/'`
                  echo $TAG_NAMES                  
               fi
            fi

            echo "TAG_NAMES=${TAG_NAMES}" >> /workspace/.env
            echo "TAG_NAMES is $TAG_NAMES"
            
      - persist_to_workspace:
          root: /root/project/
          paths:
            - .aws/credentials
            - .env
            
  get_artifacts:
    docker:
      - image: amazonlinux:1
    steps:
      - checkout
      - run:
          name: Generate Lambda payloads
          working_directory: lambda
          command: |
            yum install -y zip
            #zip volume-backup.zip volume-backup.py
            yum -y update
            curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -
            yum -y install nodejs
            npm install aws-sdk
            cd import_security_hub_findings
            curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -
            yum -y install nodejs
            npm install aws-sdk
            zip -r ../SSMExportPatchComplianceToSecurityHub.zip .
            ls -lart ../

            

#      - *attach_workspace
#      - add_ssh_keys: *add_ssh_keys_infra_modules
#      - run: *infra_modules_checkout

      - persist_to_workspace:
          root: lambda
          paths:
            - SSMExportPatchComplianceToSecurityHub.zip

  tf_validate:
    docker:
      - image: cimg/go:1.16
    steps:
      - checkout
      - run:
          name: do terraform validate using tfexec
          working_directory: terraform
          command: |
            go version
            go get -u github.com/tfsec/tfsec/cmd/tfsec            
            tfsec .
            
  s3-download:
    docker:
      - image: 173523405217.dkr.ecr.eu-west-1.amazonaws.com/travelex-infra:0.2
        aws_auth:
          aws_access_key_id: $nonprod_circleci_app_bootstrap_access_key
          aws_secret_access_key: $nonprod_circleci_app_bootstrap_secret_key
    steps:
      - checkout
      - attach_workspace:
           at: ~/      
      - add_ssh_keys: *add_ssh_keys_infra_modules
      #- run: *setup_env
      - run:
          name: copy_terraform_output_to_s3_bucket
          command: |
            pwd
            pip install awscli
            ls -larth
            aws s3 ls
            hostname
            BRANCH_STEM=${CIRCLE_BRANCH/\/*//}
            ENVIRONMENT=$(echo -e 'feature/ dev\nplay/ play\ndevelopment sit\nrelease/ uat\nhotfix/ preprod\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')
            AWS_ACCOUNT_TYPE=$(echo -e 'feature/ nonprod\nmaster prod' | awk -vX=$BRANCH_STEM '$1 == X { print $2 }')
            
            aws s3 cp s3://tvx-hackathon-mentorship-${ENVIRONMENT}-app-config/terraform_outputs.json terraform/applications/ 
            aws s3 cp s3://tvx-hackathon-mentorship-${ENVIRONMENT}-app-config/terraform_outputs.json . 
            aws cloudformation delete-stack --stack-name sls-rise-connection-service-dev-stack
            cd terraform/applications/
            ls -larth 
            du -sh terraform_outputs.json
            pwd
      - persist_to_workspace:
          root: /root/project/
          paths:
            - terraform/applications/terraform_outputs.json

  

  lambda-job:
    docker:
      - image: cimg/node:14.17.0
    steps:
      - checkout
      - *attach_workspace
          #at: .
      - add_ssh_keys: *add_ssh_keys_infra_modules
      - run: *load_bash_env
      - run:
          name: Serverless dependencies are installed
          command: |
            
            ls -la
            ls -la ~/terraform/applications
            
            pwd
            hostname
            sudo find /root -name terraform_outputs.json
            sudo cp ~/terraform/applications/terraform_outputs.json /home/circleci/project/common/serverless
            cd common/serverless
            ls -la
            pwd
            sudo make install
            make configure
      - run:
          name: Lambda is built and deployed
          command: |
            ls -la /home/circleci/project
            ls -la /home/circleci/project/common/serverless
            pwd
            cd ${CIRCLE_STAGE}
            pwd
            make build test deploy
      - setup_remote_docker:
          name: Spining off remote docker



workflows:
  version: 2
  build:
    jobs:         
      - sts
      - s3-download:
          requires:
            - sts
          filters:
            branches:
              only:
                - develop
                - master
                - feature/dit
      #- sts_dmz

      # - lambda-job:
      #     name: rise-dynamic-service
      #     requires:
      #       - s3-download
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - master
      #           - feature/dit

      - lambda-job:
          name: rise-connection-service
          requires:
            - s3-download
          filters:
            branches:
              only:
                - develop
                - master
                - feature/dit