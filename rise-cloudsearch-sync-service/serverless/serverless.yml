service: rise-cloudsearch-sync-service

plugins:
  localPath: '/usr/local/lib/node_modules/'
  modules:
    - serverless-prune-plugin
    - ./../../common/serverless/plugins/no-logs-group

custom:
  fromTerraform: ${file(../../common/serverless/sls_terraform_outputs.js)}
  prune:
    automatic: true
    number: 1

provider:
  name: aws
  runtime: ${self:custom.fromTerraform.node_runtime}
  memorySize: 1024
  stage: ${opt:stage}
  region: ${self:custom.fromTerraform.region}
  stackName: sls-${self:service}-${opt:stage, self:provider.stage}-stack
  stackTags: ${self:custom.fromTerraform.common_tags}
  tags: ${self:custom.fromTerraform.common_tags}
  deploymentBucket: tvx-mentorship-deployment-dev
  iam:
    role: ${self:custom.fromTerraform.mentorship_lambda_iam}  
  
  apiGateway:
    restApiId: ${self:custom.fromTerraform.mentorship_rest_api_id_private}
    restApiRootResourceId: ${self:custom.fromTerraform.mentorship_rest_api_root_resource_id_private}  
  vpc:
    securityGroupIds:
      - ${self:custom.fromTerraform.mentorship_sg}
    subnetIds:
      - ${self:custom.fromTerraform.subnet_private_0}
      - ${self:custom.fromTerraform.subnet_private_1}
  logs:
    restApi: "${self:custom.fromTerraform.mentorship_rest_api_id_private}"
    frameworkLambda: false
  environment:
    ${file(./configs/providers/${self:provider.name}/${opt:stage, self:provider.stage}/env.yml)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:dynamodb:eu-west-1:148807490170:table/userprofile"

functions:
  ${file(./configs/functions/functions.yml)}

resources:
  # ${file(./configs/resources/success-queue.yml)}
  # ${file(./configs/resources/log-group-and-subscription.yml)}
  # ${file(./configs/resources/object-processed-metadata-table.yml)}
